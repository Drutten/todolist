{"version":3,"sources":["components/todo/todoitem.tsx","components/todolist/todolist.tsx","components/addtodo/addtodo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoItem","event","toggledValue","this","props","todo","done","updatedTodo","name","id","changeItem","removeItem","iconDoneButton","onClick","toggleDone","bind","iconRemoveButton","toString","remove","className","React","TodoList","todolist","todos","map","item","key","Component","AddTodo","state","newTodo","setState","target","value","preventDefault","generateId","addItem","onSubmit","handleSubmit","type","placeholder","onChange","handleChange","App","updatedTodos","storeList","forEach","idx","splice","filter","retrieveList","arr","storageName","Storage","localStorage","setItem","JSON","stringify","getItem","tempList","temp","parse","length","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7fd83791.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport \"./todoitem.scss\";\r\nimport { ITodoItem } from \"../../interfaces/itodoitem\";\r\n\r\n\r\ninterface ITodoItemProps{\r\n    todo: ITodoItem;\r\n    changeItem(todo: ITodoItem): void;\r\n    removeItem(id: number): void;\r\n}\r\n\r\n\r\n\r\nclass TodoItem extends React.Component<ITodoItemProps> {\r\n\r\n    \r\n    //Toggle mellan done och undone\r\n    toggleDone(event: React.MouseEvent<HTMLSpanElement>){\r\n        //console.log(this.props.todo.id);\r\n        let toggledValue = !this.props.todo.done;\r\n        //skapa en ny todo och byt värde på done\r\n        const updatedTodo: ITodoItem = {\r\n            name: this.props.todo.name,\r\n            done: toggledValue,\r\n            id: this.props.todo.id\r\n        }\r\n        this.props.changeItem(updatedTodo);\r\n    }\r\n\r\n\r\n    remove(event: React.MouseEvent<HTMLSpanElement>){\r\n        //console.log(this.props.todo.id);\r\n        this.props.removeItem(this.props.todo.id);\r\n    }\r\n\r\n\r\n    public render() {\r\n        \r\n        const iconDoneButton = (this.props.todo.done)? <span onClick={this.toggleDone.bind(this)}>&#8617;</span>:\r\n        <span onClick={this.toggleDone.bind(this)}>&#10004;</span>;\r\n        const iconRemoveButton = <span id={this.props.todo.id.toString()} onClick={this.remove.bind(this)}>&#128465;</span>;\r\n\r\n        const todo = (this.props.todo.done)? <div><div className=\"done\">{this.props.todo.name}</div><div className=\"icons\">{iconDoneButton}{iconRemoveButton}</div></div>:\r\n        <div><div className=\"undone\">{this.props.todo.name}</div><div className=\"icons\">{iconDoneButton}{iconRemoveButton}</div></div>;\r\n\r\n        return (\r\n            <div className=\"todo-item\">{todo}</div>   \r\n        );\r\n    }\r\n\r\n\r\n}\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport './todolist.scss';\r\nimport { ITodoItem } from '../../interfaces/itodoitem';\r\nimport TodoItem from '../todo/todoitem';\r\n\r\n\r\n\r\nexport interface ITodoListProps {\r\n    todos: ITodoItem[];\r\n    changeItem(todo: ITodoItem): void;\r\n    removeItem(id: number): void;\r\n}\r\n\r\n\r\n\r\nexport default class TodoList extends React.Component<ITodoListProps>{\r\n\r\n    \r\n    render() {\r\n\r\n        const todolist = this.props.todos.map((item)=>    \r\n            <TodoItem key={item.id} todo={item} changeItem={this.props.changeItem} removeItem={this.props.removeItem}/>       \r\n        );\r\n\r\n        return (\r\n        <div>{todolist}</div>\r\n        ); \r\n        \r\n    }\r\n}","import React from \"react\";\r\nimport { ITodoItem } from \"../../interfaces/itodoitem\";\r\nimport \"./addtodo.scss\";\r\n\r\n\r\nexport interface IAddTodoProps {\r\n    addItem(todo: ITodoItem): void;\r\n    generateId(): number;\r\n}\r\n\r\nexport interface IAddTodoState {\r\n    newTodo: ITodoItem;\r\n}\r\n\r\n\r\nexport class AddTodo extends React.Component<IAddTodoProps, IAddTodoState> {\r\n\r\n    constructor(props: IAddTodoProps){\r\n        super(props);\r\n\r\n        this.state = {\r\n            newTodo: { name: '', done: false, id: 0 }\r\n        }\r\n            \r\n    }\r\n\r\n\r\n    //event handler som fångar upp ändringar i input\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement>){\r\n        \r\n        this.setState({\r\n            newTodo: {name: event.target.value, done: false, id: 0}\r\n        });  \r\n    } \r\n\r\n    \r\n    //event handler för submit\r\n    handleSubmit(event: React.FormEvent<HTMLFormElement>){\r\n        event.preventDefault();\r\n        if(this.state.newTodo.name){\r\n\r\n            const newTodo = {\r\n                name: this.state.newTodo.name,\r\n                done: this.state.newTodo.done,\r\n                id: this.props.generateId()\r\n            }\r\n\r\n            this.props.addItem(newTodo);\r\n            //återställ\r\n            this.setState({\r\n                newTodo: {name: '', done: false, id: 0}\r\n            });\r\n        }    \r\n    }\r\n\r\n    \r\n\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit.bind(this)}>\r\n                    <input type=\"text\" className=\"add-input\" name=\"textinput\" value={this.state.newTodo.name} placeholder=\"Add Todo\"  onChange={this.handleChange.bind(this)}/>\r\n                    <input type=\"submit\" className=\"add-button\" value=\"Add\"/>\r\n                </form>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.scss';\nimport TodoList from './components/todolist/todolist';\nimport { AddTodo } from './components/addtodo/addtodo';\nimport { ITodoItem } from './interfaces/itodoitem';\n\n\n\ninterface IAppState {\n  todos: ITodoItem[];\n}\n\nclass App extends React.Component<{}, IAppState> {\n  \n  constructor(props: any){\n    super(props);\n    //initial state\n    this.state = {\n      todos: this.retrieveList(\"todos\"),\n    }\n  }\n\n\n\n  storeList(arr: ITodoItem[], storageName: string): void{\n    //Kolla om webbläsaren har webStorage\n    if(typeof(Storage) !== \"undefined\"){           \n        localStorage.setItem(storageName, JSON.stringify(arr));           \n    }\n  }\n\n\n  retrieveList(storageName: string): ITodoItem[]{\n    const arr: ITodoItem[] = [];\n    //Kolla om webbläsaren har webStorage\n    if(typeof(Storage) !== \"undefined\"){\n\n        //Kolla om listan är definierad i localStorage\n        if(localStorage.getItem(storageName)){\n\n            //Hämta från localStorage\n            let tempList: any[];\n            let temp: string | null = localStorage.getItem(storageName); \n            tempList = (temp)? JSON.parse(temp) : [];\n            \n            if(tempList.length > 0){\n                arr.length = 0;\n                tempList.forEach((item: any) => {\n                    arr.push(item);\n                });\n            }\n        }    \n    }\n    return arr;    \n}\n  \n\n\n  addItem =(todo: ITodoItem) =>{\n    const updatedTodos = [...this.state.todos, todo];\n    this.storeList(updatedTodos, \"todos\"); \n    this.setState({\n      todos: updatedTodos \n    });\n  }\n\n\n  generateId =(): number =>{\n    let id = 0;\n    this.state.todos.forEach((item)=>{\n      id = (item.id > id)? item.id : id;\n    });\n    return ++id;\n  }\n\n\n  changeItem =(updatedTodo: ITodoItem) =>{\n    const updatedTodos = [...this.state.todos];\n    this.state.todos.forEach((item, idx)=>{\n      if(updatedTodo.id === item.id){\n        updatedTodos.splice(idx, 1, updatedTodo);\n      }\n    });\n    this.storeList(updatedTodos, \"todos\");\n    this.setState({\n      todos: updatedTodos\n    });     \n  }\n\n  \n  removeItem = (id: number) =>{\n    const updatedTodos = this.state.todos.filter(item => item.id !== id);\n    this.storeList(updatedTodos, \"todos\");\n    this.setState({\n      todos: updatedTodos\n    });  \n  }\n  \n\n  render(){ \n    \n    return (\n      \n      <div className=\"App\">\n        <h1>Todo List</h1>\n        <div className=\"list-section\">\n          <AddTodo  addItem={this.addItem} generateId={this.generateId}/>   \n          <TodoList todos={this.state.todos} changeItem={this.changeItem} removeItem={this.removeItem}/>\n        </div>  \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}